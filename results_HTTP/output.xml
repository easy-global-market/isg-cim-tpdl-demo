<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.5 on linux)" generated="20201001 10:22:58.680" rpa="false">
<suite id="s1" name="Isg-Cim-Tpdl-Demo" source="/home/poliveira/git/isg-cim-tpdl-demo">
<suite id="s1-s1" name="Tests" source="/home/poliveira/git/isg-cim-tpdl-demo/Tests">
<suite id="s1-s1-s1" name="Notify" source="/home/poliveira/git/isg-cim-tpdl-demo/Tests/Notify.robot">
<test id="s1-s1-s1-t1" name="Test notify HTTP Broker">
<kw name="Connect to broker" library="HTTP">
<kw name="Initialize Client" library="HttpCtrl.Client">
<doc>Initialize client using host and port of a server which will be used for communication.</doc>
<arguments>
<arg>127.0.0.1</arg>
<arg>8000</arg>
</arguments>
<status status="PASS" starttime="20201001 10:22:58.739" endtime="20201001 10:22:58.740"></status>
</kw>
<kw name="Start Server" library="HttpCtrl.Server">
<doc>Start HTTP server on specific address and port. Server should be closed when it is not required, for example,
when test is over. In case of double call of \`Start Server\`, the previous will be stopped and only then the
next one HTTP server will be started.</doc>
<arguments>
<arg>127.0.0.1</arg>
<arg>8000</arg>
</arguments>
<msg timestamp="20201001 10:22:58.741" level="INFO">Prepare HTTP server '127.0.0.1:8000' and thread to serve it.</msg>
<status status="PASS" starttime="20201001 10:22:58.741" endtime="20201001 10:22:58.742"></status>
</kw>
<status status="PASS" starttime="20201001 10:22:58.738" endtime="20201001 10:22:58.742"></status>
</kw>
<kw name="Notify broker" library="HTTP">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>{ "message": "Hello!" }</arg>
</arguments>
<assign>
<var>${request body}</var>
</assign>
<msg timestamp="20201001 10:22:58.743" level="INFO">${request body} = { "message": "Hello!" }</msg>
<status status="PASS" starttime="20201001 10:22:58.743" endtime="20201001 10:22:58.743"></status>
</kw>
<kw name="Send Http Request Async" library="HttpCtrl.Client">
<doc>Send HTTP request with specified parameters asynchronously. Non-blocking function to send request that waits
for reply using separate thread. Return connection object that is used as a key to get asynchronous response
using function 'Get Async Response'.</doc>
<arguments>
<arg>POST</arg>
<arg>/post</arg>
<arg>${request body}</arg>
</arguments>
<assign>
<var>${connection}</var>
</assign>
<msg timestamp="20201001 10:22:58.746" level="INFO">Request (type: 'http', method 'POST') is sent to 127.0.0.1:8000.</msg>
<msg timestamp="20201001 10:22:58.746" level="INFO">POST /post</msg>
<msg timestamp="20201001 10:22:58.746" level="INFO">{ "message": "Hello!" }</msg>
<msg timestamp="20201001 10:22:58.747" level="INFO">${connection} = &lt;http.client.HTTPConnection object at 0x7fe021260d50&gt;</msg>
<status status="PASS" starttime="20201001 10:22:58.743" endtime="20201001 10:22:58.747"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request body}</arg>
</arguments>
<msg timestamp="20201001 10:22:58.748" level="INFO">${request body} = { "message": "Hello!" }</msg>
<status status="PASS" starttime="20201001 10:22:58.747" endtime="20201001 10:22:58.748"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${connection}</arg>
</arguments>
<msg timestamp="20201001 10:22:58.749" level="INFO">${connection} = &lt;http.client.HTTPConnection object at 0x7fe021260d50&gt;</msg>
<status status="PASS" starttime="20201001 10:22:58.748" endtime="20201001 10:22:58.749"></status>
</kw>
<status status="PASS" starttime="20201001 10:22:58.742" endtime="20201001 10:22:58.749"></status>
</kw>
<kw name="Wait for notification and validate it" library="HTTP">
<kw name="Wait For Request" library="HttpCtrl.Server">
<doc>Command to server to wait incoming request. This call is blocked until HTTP request arrives. Basically server
receives all requests after \`Start Server\` and places them to internal queue. When test call function
\`Wait For Request\` it checks the queue and if it is not empty returns the first request in the queue. If the
queue is empty then function waits when the server receives request and place it to the queue. There is
default time period '5 seconds' to wait request and this waiting time can be changed. If during wait time the
request is not received then timeout error occurs.</doc>
<msg timestamp="20201001 10:22:58.750" level="INFO">Request is received: POST /post
{ "message": "Hello!" }</msg>
<status status="PASS" starttime="20201001 10:22:58.750" endtime="20201001 10:22:58.750"></status>
</kw>
<kw name="Get Request Method" library="HttpCtrl.Server">
<doc>Returns method of received request as a string. This function should be called after \`Wait For Request\`,
otherwise None is returned.</doc>
<assign>
<var>${received_req_method}</var>
</assign>
<msg timestamp="20201001 10:22:58.750" level="INFO">${received_req_method} = POST</msg>
<status status="PASS" starttime="20201001 10:22:58.750" endtime="20201001 10:22:58.751"></status>
</kw>
<kw name="Get Request Url" library="HttpCtrl.Server">
<doc>Returns URL of received request as a string. This function should be called after \`Wait For Request\`,
otherwise None is returned.</doc>
<assign>
<var>${received_req_url}</var>
</assign>
<msg timestamp="20201001 10:22:58.751" level="INFO">${received_req_url} = /post</msg>
<status status="PASS" starttime="20201001 10:22:58.751" endtime="20201001 10:22:58.751"></status>
</kw>
<kw name="Get Request Body" library="HttpCtrl.Server">
<doc>Returns body of received request as a string. This function should be called after \`Wait For Request\`,
otherwise None is returned.</doc>
<assign>
<var>${received_req_body}</var>
</assign>
<msg timestamp="20201001 10:22:58.751" level="INFO">${received_req_body} = { "message": "Hello!" }</msg>
<status status="PASS" starttime="20201001 10:22:58.751" endtime="20201001 10:22:58.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${received_req_method}</arg>
<arg>POST</arg>
</arguments>
<status status="PASS" starttime="20201001 10:22:58.751" endtime="20201001 10:22:58.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${received_req_url}</arg>
<arg>/post</arg>
</arguments>
<status status="PASS" starttime="20201001 10:22:58.752" endtime="20201001 10:22:58.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${received_req_body}</arg>
<arg>${request body}</arg>
</arguments>
<status status="PASS" starttime="20201001 10:22:58.752" endtime="20201001 10:22:58.753"></status>
</kw>
<kw name="Reply By" library="HttpCtrl.Server">
<doc>Send response using specified HTTP code and body. This function should be called after \`Wait For Request\`.</doc>
<arguments>
<arg>200</arg>
</arguments>
<msg timestamp="20201001 10:22:58.754" level="INFO">Push response to the Response Storage: 200</msg>
<status status="PASS" starttime="20201001 10:22:58.753" endtime="20201001 10:22:58.754"></status>
</kw>
<kw name="Get Async Response" library="HttpCtrl.Client">
<doc>Return response as an object for the specified connection. This method should be called once after
'Send HTTP Request Async' or 'Send HTTPS Request Async'. It returns None if there is no response for the
specified connection.</doc>
<arguments>
<arg>${connection}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201001 10:22:58.757" level="INFO">${response} = 200</msg>
<status status="PASS" starttime="20201001 10:22:58.754" endtime="20201001 10:22:58.757"></status>
</kw>
<kw name="Get Status From Response" library="HttpCtrl.Client">
<doc>Return response status as an integer value from the specified response object that was obtained by function
'Get Async Response'. Return 'None' if response object is None.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${response_status}</var>
</assign>
<msg timestamp="20201001 10:22:58.759" level="INFO">${response_status} = 200</msg>
<status status="PASS" starttime="20201001 10:22:58.758" endtime="20201001 10:22:58.759"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>200</arg>
</arguments>
<assign>
<var>${expected status}</var>
</assign>
<msg timestamp="20201001 10:22:58.759" level="INFO">${expected status} = 200</msg>
<status status="PASS" starttime="20201001 10:22:58.759" endtime="20201001 10:22:58.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status}</arg>
<arg>${expected status}</arg>
</arguments>
<status status="PASS" starttime="20201001 10:22:58.760" endtime="20201001 10:22:58.760"></status>
</kw>
<status status="PASS" starttime="20201001 10:22:58.749" endtime="20201001 10:22:58.761"></status>
</kw>
<kw name="Discconect from broker" library="HTTP" type="teardown">
<kw name="Stop Server" library="HttpCtrl.Server">
<doc>Stop HTTP server if it has been started. This function should be called if server has been started.</doc>
<msg timestamp="20201001 10:22:58.762" level="INFO">Push response to the Response Storage: &lt;HttpCtrl.internal_messages.TerminationRequest object at 0x7fe02124a5d0&gt;</msg>
<msg timestamp="20201001 10:22:59.258" level="INFO">HTTP server is stopped.</msg>
<status status="PASS" starttime="20201001 10:22:58.762" endtime="20201001 10:22:59.258"></status>
</kw>
<status status="PASS" starttime="20201001 10:22:58.761" endtime="20201001 10:22:59.259"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" starttime="20201001 10:22:58.737" endtime="20201001 10:22:59.260" critical="yes"></status>
</test>
<doc>Test Binding</doc>
<status status="PASS" starttime="20201001 10:22:58.704" endtime="20201001 10:22:59.263"></status>
</suite>
<status status="PASS" starttime="20201001 10:22:58.702" endtime="20201001 10:22:59.264"></status>
</suite>
<status status="PASS" starttime="20201001 10:22:58.681" endtime="20201001 10:22:59.265"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Isg-Cim-Tpdl-Demo">Isg-Cim-Tpdl-Demo</stat>
<stat pass="1" fail="0" id="s1-s1" name="Tests">Isg-Cim-Tpdl-Demo.Tests</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Notify">Isg-Cim-Tpdl-Demo.Tests.Notify</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
