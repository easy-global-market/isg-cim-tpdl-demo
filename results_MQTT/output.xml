<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.5 on linux)" generated="20201001 10:56:24.534" rpa="false">
<suite id="s1" name="Isg-Cim-Tpdl-Demo" source="/home/poliveira/git/isg-cim-tpdl-demo">
<suite id="s1-s1" name="Tests" source="/home/poliveira/git/isg-cim-tpdl-demo/Tests">
<suite id="s1-s1-s1" name="Notify" source="/home/poliveira/git/isg-cim-tpdl-demo/Tests/Notify.robot">
<test id="s1-s1-s1-t1" name="Test notify MQTT Broker">
<kw name="Connect to broker" library="MQTT">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20201001 10:56:24.594" level="INFO">${time} = 1601546184</msg>
<status status="PASS" starttime="20201001 10:56:24.593" endtime="20201001 10:56:24.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=.</arg>
<arg>robot.mqtt</arg>
<arg>${time}</arg>
</arguments>
<assign>
<var>${client}</var>
</assign>
<msg timestamp="20201001 10:56:24.596" level="INFO">${client} = robot.mqtt.1601546184</msg>
<status status="PASS" starttime="20201001 10:56:24.594" endtime="20201001 10:56:24.596"></status>
</kw>
<kw name="Subscribe Async" library="MQTT">
<arguments>
<arg>client.id=${client}</arg>
<arg>topic=${topic}</arg>
</arguments>
<kw name="Connect" library="MQTTLibrary">
<doc>Connect to an MQTT broker. This is a pre-requisite step for publish
and subscribe keywords.</doc>
<arguments>
<arg>${broker.uri}</arg>
<arg>${port}</arg>
<arg>${client.id}</arg>
<arg>${false}</arg>
</arguments>
<msg timestamp="20201001 10:56:24.599" level="INFO">Connecting to 127.0.0.1 at port 1883</msg>
<status status="PASS" starttime="20201001 10:56:24.598" endtime="20201001 10:56:24.603"></status>
</kw>
<kw name="Subscribe" library="MQTTLibrary">
<doc>Subscribe to a topic and return a list of message payloads received
    within the specified time.</doc>
<arguments>
<arg>${topic}</arg>
<arg>${qos}</arg>
<arg>${timeout}</arg>
<arg>${limit}</arg>
</arguments>
<msg timestamp="20201001 10:56:24.604" level="INFO">Subscribing to topic: test/mqtt_test</msg>
<msg timestamp="20201001 10:56:24.605" level="INFO">Starting background loop</msg>
<status status="PASS" starttime="20201001 10:56:24.604" endtime="20201001 10:56:24.605"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:24.597" endtime="20201001 10:56:24.605"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:24.593" endtime="20201001 10:56:24.606"></status>
</kw>
<kw name="Notify broker" library="MQTT">
<kw name="Publish to MQTT Broker" library="MQTT">
<arguments>
<arg>topic=${topic}</arg>
<arg>message=test message</arg>
<arg>qos=1</arg>
</arguments>
<kw name="Connect" library="MQTTLibrary">
<doc>Connect to an MQTT broker. This is a pre-requisite step for publish
and subscribe keywords.</doc>
<arguments>
<arg>${broker.uri}</arg>
<arg>${port}</arg>
<arg>${client.id}</arg>
<arg>${clean_session}</arg>
</arguments>
<msg timestamp="20201001 10:56:24.607" level="INFO">Connecting to 127.0.0.1 at port 1883</msg>
<status status="PASS" starttime="20201001 10:56:24.607" endtime="20201001 10:56:24.609"></status>
</kw>
<kw name="Publish" library="MQTTLibrary">
<doc>Publish a message to a topic with specified qos and retained flag.
It is required that a connection has been established using `Connect`
keyword before using this keyword.</doc>
<arguments>
<arg>${topic}</arg>
<arg>${message}</arg>
<arg>${qos}</arg>
<arg>${retention}</arg>
</arguments>
<msg timestamp="20201001 10:56:24.609" level="INFO">Publish topic: test/mqtt_test, message: test message, qos: 1, retain: False</msg>
<status status="PASS" starttime="20201001 10:56:24.609" endtime="20201001 10:56:24.610"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:24.606" endtime="20201001 10:56:24.610"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:24.606" endtime="20201001 10:56:24.611"></status>
</kw>
<kw name="Wait for notification and validate it" library="MQTT">
<kw name="Listen and Get Messages" library="MQTT">
<arguments>
<arg>topic=${topic}</arg>
</arguments>
<assign>
<var>@{messages}</var>
</assign>
<kw name="Listen" library="MQTTLibrary">
<doc>Listen to a topic and return a list of message payloads received
    within the specified time. Requires an async Subscribe to have been called previously.</doc>
<arguments>
<arg>${topic}</arg>
<arg>${timeout}</arg>
<arg>${limit}</arg>
</arguments>
<assign>
<var>@{messages}</var>
</assign>
<msg timestamp="20201001 10:56:24.615" level="INFO">Listening on topic: test/mqtt_test</msg>
<msg timestamp="20201001 10:56:25.617" level="INFO">@{messages} = [ test message ]</msg>
<status status="PASS" starttime="20201001 10:56:24.614" endtime="20201001 10:56:25.617"></status>
</kw>
<msg timestamp="20201001 10:56:25.618" level="INFO">@{messages} = [ test message ]</msg>
<status status="PASS" starttime="20201001 10:56:24.612" endtime="20201001 10:56:25.618"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages}</arg>
</arguments>
<msg timestamp="20201001 10:56:25.620" level="INFO">['test message']</msg>
<status status="PASS" starttime="20201001 10:56:25.619" endtime="20201001 10:56:25.620"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${messages}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20201001 10:56:25.622" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20201001 10:56:25.621" endtime="20201001 10:56:25.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages}[0]</arg>
<arg>test message</arg>
</arguments>
<status status="PASS" starttime="20201001 10:56:25.622" endtime="20201001 10:56:25.627"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:24.611" endtime="20201001 10:56:25.628"></status>
</kw>
<kw name="Discconect from broker" library="MQTT" type="teardown">
<kw name="Unsubscribe and Disconnect" library="MQTT">
<arguments>
<arg>${topic}</arg>
</arguments>
<kw name="Unsubscribe" library="MQTTLibrary">
<doc>Unsubscribe the client from the specified topic.</doc>
<arguments>
<arg>${topic}</arg>
</arguments>
<msg timestamp="20201001 10:56:25.633" level="INFO">Closing background loop</msg>
<msg timestamp="20201001 10:56:26.618" level="INFO">Unsubscribing from topic: test/mqtt_test</msg>
<status status="PASS" starttime="20201001 10:56:25.632" endtime="20201001 10:56:26.619"></status>
</kw>
<kw name="Disconnect" library="MQTTLibrary" type="teardown">
<doc>Disconnect from MQTT Broker.</doc>
<status status="PASS" starttime="20201001 10:56:26.620" endtime="20201001 10:56:26.621"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:25.630" endtime="20201001 10:56:26.622"></status>
</kw>
<status status="PASS" starttime="20201001 10:56:25.629" endtime="20201001 10:56:26.622"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" starttime="20201001 10:56:24.592" endtime="20201001 10:56:26.623" critical="yes"></status>
</test>
<doc>Test Binding</doc>
<status status="PASS" starttime="20201001 10:56:24.559" endtime="20201001 10:56:26.626"></status>
</suite>
<status status="PASS" starttime="20201001 10:56:24.556" endtime="20201001 10:56:26.631"></status>
</suite>
<status status="PASS" starttime="20201001 10:56:24.535" endtime="20201001 10:56:26.636"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Isg-Cim-Tpdl-Demo">Isg-Cim-Tpdl-Demo</stat>
<stat pass="1" fail="0" id="s1-s1" name="Tests">Isg-Cim-Tpdl-Demo.Tests</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Notify">Isg-Cim-Tpdl-Demo.Tests.Notify</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
