<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.5 on linux)" generated="20201002 12:10:48.247" rpa="false">
<suite id="s1" name="Isg-Cim-Tpdl-Demo" source="/home/poliveira/git/isg-cim-tpdl-demo">
<suite id="s1-s1" name="Tests" source="/home/poliveira/git/isg-cim-tpdl-demo/Tests">
<suite id="s1-s1-s1" name="Notify" source="/home/poliveira/git/isg-cim-tpdl-demo/Tests/Notify.robot">
<test id="s1-s1-s1-t1" name="Test notify MQTT Broker">
<kw name="Connect to broker" library="MQTT">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20201002 12:10:48.309" level="INFO">${time} = 1601637048</msg>
<status status="PASS" starttime="20201002 12:10:48.308" endtime="20201002 12:10:48.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=.</arg>
<arg>robot.mqtt</arg>
<arg>${time}</arg>
</arguments>
<assign>
<var>${client}</var>
</assign>
<msg timestamp="20201002 12:10:48.310" level="INFO">${client} = robot.mqtt.1601637048</msg>
<status status="PASS" starttime="20201002 12:10:48.310" endtime="20201002 12:10:48.310"></status>
</kw>
<kw name="Subscribe Async" library="MQTT">
<arguments>
<arg>client.id=${client}</arg>
<arg>topic=${topic}</arg>
</arguments>
<kw name="Connect" library="MQTTLibrary">
<doc>Connect to an MQTT broker. This is a pre-requisite step for publish
and subscribe keywords.</doc>
<arguments>
<arg>${broker.uri}</arg>
<arg>${port}</arg>
<arg>${client.id}</arg>
<arg>${false}</arg>
</arguments>
<msg timestamp="20201002 12:10:48.312" level="INFO">Connecting to 127.0.0.1 at port 1883</msg>
<status status="PASS" starttime="20201002 12:10:48.311" endtime="20201002 12:10:48.316"></status>
</kw>
<kw name="Subscribe" library="MQTTLibrary">
<doc>Subscribe to a topic and return a list of message payloads received
    within the specified time.</doc>
<arguments>
<arg>${topic}</arg>
<arg>${qos}</arg>
<arg>${timeout}</arg>
<arg>${limit}</arg>
</arguments>
<msg timestamp="20201002 12:10:48.317" level="INFO">Subscribing to topic: test/mqtt_test</msg>
<msg timestamp="20201002 12:10:48.318" level="INFO">Starting background loop</msg>
<status status="PASS" starttime="20201002 12:10:48.316" endtime="20201002 12:10:48.318"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.310" endtime="20201002 12:10:48.319"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.307" endtime="20201002 12:10:48.319"></status>
</kw>
<kw name="Notify broker" library="MQTT">
<kw name="Publish to MQTT Broker" library="MQTT">
<arguments>
<arg>topic=${topic}</arg>
<arg>message=test message</arg>
<arg>qos=1</arg>
</arguments>
<kw name="Connect" library="MQTTLibrary">
<doc>Connect to an MQTT broker. This is a pre-requisite step for publish
and subscribe keywords.</doc>
<arguments>
<arg>${broker.uri}</arg>
<arg>${port}</arg>
<arg>${client.id}</arg>
<arg>${clean_session}</arg>
</arguments>
<msg timestamp="20201002 12:10:48.321" level="INFO">Connecting to 127.0.0.1 at port 1883</msg>
<status status="PASS" starttime="20201002 12:10:48.321" endtime="20201002 12:10:48.323"></status>
</kw>
<kw name="Publish" library="MQTTLibrary">
<doc>Publish a message to a topic with specified qos and retained flag.
It is required that a connection has been established using `Connect`
keyword before using this keyword.</doc>
<arguments>
<arg>${topic}</arg>
<arg>${message}</arg>
<arg>${qos}</arg>
<arg>${retention}</arg>
</arguments>
<msg timestamp="20201002 12:10:48.323" level="INFO">Publish topic: test/mqtt_test, message: test message, qos: 1, retain: False</msg>
<status status="PASS" starttime="20201002 12:10:48.323" endtime="20201002 12:10:48.324"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.320" endtime="20201002 12:10:48.324"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.319" endtime="20201002 12:10:48.325"></status>
</kw>
<kw name="Wait for notification and validate it" library="MQTT">
<kw name="Listen and Get Messages" library="MQTT">
<arguments>
<arg>topic=${topic}</arg>
</arguments>
<assign>
<var>@{messages}</var>
</assign>
<kw name="Listen" library="MQTTLibrary">
<doc>Listen to a topic and return a list of message payloads received
    within the specified time. Requires an async Subscribe to have been called previously.</doc>
<arguments>
<arg>${topic}</arg>
<arg>${timeout}</arg>
<arg>${limit}</arg>
</arguments>
<assign>
<var>@{messages}</var>
</assign>
<msg timestamp="20201002 12:10:48.328" level="INFO">@{messages} = [ test message ]</msg>
<status status="PASS" starttime="20201002 12:10:48.327" endtime="20201002 12:10:48.328"></status>
</kw>
<msg timestamp="20201002 12:10:48.329" level="INFO">@{messages} = [ test message ]</msg>
<status status="PASS" starttime="20201002 12:10:48.326" endtime="20201002 12:10:48.329"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages}</arg>
</arguments>
<msg timestamp="20201002 12:10:48.330" level="INFO">['test message']</msg>
<status status="PASS" starttime="20201002 12:10:48.329" endtime="20201002 12:10:48.330"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${messages}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20201002 12:10:48.330" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20201002 12:10:48.330" endtime="20201002 12:10:48.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages}[0]</arg>
<arg>test message</arg>
</arguments>
<status status="PASS" starttime="20201002 12:10:48.331" endtime="20201002 12:10:48.332"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.325" endtime="20201002 12:10:48.333"></status>
</kw>
<kw name="Discconect from broker" library="MQTT" type="teardown">
<kw name="Unsubscribe and Disconnect" library="MQTT">
<arguments>
<arg>${topic}</arg>
</arguments>
<kw name="Unsubscribe" library="MQTTLibrary">
<doc>Unsubscribe the client from the specified topic.</doc>
<arguments>
<arg>${topic}</arg>
</arguments>
<msg timestamp="20201002 12:10:48.334" level="INFO">Closing background loop</msg>
<msg timestamp="20201002 12:10:49.327" level="INFO">Unsubscribing from topic: test/mqtt_test</msg>
<status status="PASS" starttime="20201002 12:10:48.334" endtime="20201002 12:10:49.329"></status>
</kw>
<kw name="Disconnect" library="MQTTLibrary">
<doc>Disconnect from MQTT Broker.</doc>
<status status="PASS" starttime="20201002 12:10:49.329" endtime="20201002 12:10:49.330"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.334" endtime="20201002 12:10:49.331"></status>
</kw>
<status status="PASS" starttime="20201002 12:10:48.333" endtime="20201002 12:10:49.332"></status>
</kw>
<doc>Validate notification received by the broker (MQTT or HTTP)</doc>
<timeout value="30 seconds"></timeout>
<status status="PASS" starttime="20201002 12:10:48.306" endtime="20201002 12:10:49.333" critical="yes"></status>
</test>
<doc>Test Binding</doc>
<status status="PASS" starttime="20201002 12:10:48.271" endtime="20201002 12:10:49.335"></status>
</suite>
<status status="PASS" starttime="20201002 12:10:48.269" endtime="20201002 12:10:49.337"></status>
</suite>
<status status="PASS" starttime="20201002 12:10:48.248" endtime="20201002 12:10:49.339"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Isg-Cim-Tpdl-Demo">Isg-Cim-Tpdl-Demo</stat>
<stat pass="1" fail="0" id="s1-s1" name="Tests">Isg-Cim-Tpdl-Demo.Tests</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Notify">Isg-Cim-Tpdl-Demo.Tests.Notify</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
